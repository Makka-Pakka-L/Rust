											Rust(锈)
1、运行(文件名为Hello World.rs)
	fn main(){
		println!('Hello World');
	}

	终端:
	rustc Hello World.rs	//编译这个文件,前提是文件路径不能搞错。这会生成一个.exe,命名标准见下
	./hello_world			//运行hello_world.exe ,命名会吧原来的.rs名字改为小写,空格改为下划线
	

2、输出
	print!();	//与C相同,但是占位符修改成{}
	println!();	//与C相同,但是占位符修改成{},ln相对比是换行
	
	占位符'{}'的用法:
		println!('{}',a); 	// 输出为a的值
		println!('{{}}',a);	// 输出为'{}'
		println!('{0},{1},{2}',a,b,c);	//	输出结果为	a,b,c
		println!('{2},{1},{0}',a,b,c);	//	输出结果为	c,b,a
		
		///{0}是把后面定义的变量和常量都认为是一个链式数组,0代表第一个量的值,1代表第二个量的值
	例子1:
		let a = '女生';
		let old = 18;
		let year = 2005;
		let moon = 3;
		let day = 31;
		println!('李是个{}',a);
		println!('李是个可爱的女生,她今年快{0}岁了,她是{3}年{2}月{1}日降生与这个世上的',old,day,moon,year);
	
	输出1:
		李是个女生
		李是个可爱的女生,她今年快18岁了,她是2005年3月31日降生与这个世上的
		
3、定义常量和变量
///	Rust是静态强类型语言，所有的变量都有严格的编译期语法检查。

	let变量
	static变量
	const常量

	(1)let变量
		用法:声明局部变量
		1.不可变局部变量
			let x = 5;		//要是修改x的值系统报错
			let x:f64 = 0.64;
		2.可变局部变量
			let mut x = 5;
			println!('{}', x);
			x = 6;		//只修改值不修改x的地址
			println!('{}', x);
			
			输出:5
				 6
		3.自动类型推导
			let a = 32;		//int类型
			let b = '32';	//str类型
		
	(2)static变量
		用法:静态全局变量,静态局部变量
		在 let 前+ static
		
	(3)const常量
		用法:声明常量	//次常量是全局,不会局限与{},而是作用于所有域
		///声明常量使用 const 关键字而不是 let，并且必须注明值的类型
		
4、数据类型
///	和C类似
	(1)整数类型
		位长度			有符号			无符号	
		8-bit 			i8 				u8		
		16-bit 			i16 			u16		
		32-bit 			i32 			u32		
		64-bit 			i64 			u64		
		128-bit 		i128 			u128	
		arch 			isize 			usize	

		十进制 				98_222		
		十六进制 			0xff		
		八进制 				0o77		
		二进制 				0b1111_0000	

	(2)浮点类型
		'f32'
		'f64'
		
	(3)布尔类型
		同C
		
	(4)字符类型
		同C
		强调:Rust上字符串中文只能用UTF-8
	
	(5)复合类型
	
		1.这是一对用元组包括的一组数据,可以不同类型
			let tup:(i32, f64, u8) = (500, 6.4, 1);
			//	tup.0 等于 500
			//	tup.1 等于 6.4
			//	tup.2 等于 1
			let (x, y, z) = tup;
			// 	y 等于 6.4
		
		2.数组用[]包括相同类型的数据
			let a = [1, 2, 3, 4, 5];
			//	a为长度为5的整型数组
			
			let b = ['li', 'jin', 'wan'];
			//	b是长度为3的字符串数组
			
			let c: [i32,5] = [1, 2, 3, 4, 5];
			//	c是长度为5的 i32 类型数组

			let d = [3; 5];
			//	等同于let d = [3, 3, 3, 3, 3]

			let first = a[0];
			//	访问数组和C一致
			
			a[0] = 123;		//错误,数组 a 不可以修改
			let mut a = [1, 2, 3];	
			a[0] = 4;		//正确
			
5、注释
	'//', '///', '/*'    '*/'
	和C一样

6、条件语言
	和C类似
		(1)if a>0{
			print!();
		}
		
		(2)强调
			if 判断的条件只能是bool(布尔类型),否则报错
		
		(3)三元条件运算表达式
			例子2:
				let number = if a>0 {1} else {-1};
				println!("{}",number);
				
			输出2:
				1

7、循环
	while(){}	//和C一样
	for in {}	//和Python一样
	loop{}		//不一样
		(1)loop{}
			用法:无限循环结构,和while(!0)一样
			例子3:
				loop{
				
				}


8、函数
	(1)结构:
		fn<函数名>(<参数>)<函数体>	//函数名字只能为  小写字母, 数字, 下划线*
		
		例子5:
			fn main(){
				another(5, 6);
			}
			
			fn another(x: i32, y: i32){
				println!("{}", x);
				println!("{}", y);
			}
		
		输出5:	5
				6
	
	
	(2)函数体的语句和表达式
			
			例子6:
					fn main(){
						let x = 5;
						
						let y = {
							let x = 3;
							x + 1
						}
						println!("{}", x);
						println!("{}", y);
					}
			
			输出6:
					5
					4
			
			例子7:
					fn main(){
						fn five -> i32{
							5
						}
						println!("{}", five());
					}
			
			输出7:	5
			
解释 + 总结:在函数表达式中是不能使用 return 的,所以 'x+1' 为 y 的值
			正常函数下是可以使用return的
			在Rust中函数可以嵌套,比如在 main 函数下创建函数


9、所有权*

///	Stack &	Heap
///	Stack 是栈
///	Heap  是堆
///	Stack就是栈,栈就像一个(1,1,∞)的存储器,存数据只能从最上面放进去.
///	Heap 就是堆,堆就像一个(∞,∞,1)的存储器,纯数据可以给一整块修改放进去
///	Stack好处:寻找快,存放快,节约内存
///	Stack坏处:应为节约内存,一个值所拥有的栈是固定的,所以不能修改值,但是可以弹出栈也就是释放内存
///	Heap 好处:可以修改值
///	Heap 坏处:值通过指针访问,需要消耗更多的系统资源;一个值会给分配大于等于值得内存,防止修改时内存溢出,固导致占用内存大


	(1)创建srting类型
		例子4:
			let mut s = String::from("hello");
			//"::"表示from是String类型下的函数
			
			s.push_str(", World");
			//在 s 字符串后面添加啥啥啥
			println("{}", s)
		
		输出4:
			Hello, World
	(2)内存的分配
		Rust采用了不同的方法:对于某个值来说,当拥有它的变量走出作用范围时,内存会立即自动的交还给操作系统.
		这时值会自动调用一个叫  drop() 的函数来释放内存
	
	(3)变量和数据交互的方式:移动(Move)
		1.基础的类型
			let x = 5;
			let y = x;
			//两个5都被压在Stack里
		
		2.String类型
			let s1 = String::from("hello");
			let s2 = s1;	//s2的prt会指向h1的首地址,也就是把s1的Stack移动到s2的Stack,s1失效*
			//一个string类型有三部分组成:
			//							ptr:	 指向存放string内容的内存指针
			//							len:	 值的长度
			//							capacity:值的容量(系统分配的内存大小)
			//
			//	  s1(Stack)					   h1(Heap)
			//	name	value				index	value
			//	prt		  ---------------->	  0		  h
			//	len		  5 				  1 	  e
			//	capacity  5					  2		  l
			//								  3       l
			//								  4		  o
			//
			///s1存放在Stack上
			///h1存放在Heap 上
			
			解释:为了防止离开作用域时s1和s2都调用 drop()函数来释放内存导致	"二次释放内存"的大BUG,
					Rust将s1赋值给s2的同时将s1失效也就是弹出栈,来应对BUG
			
	(4)变量和数据交互的方式:克隆(clone)
		1.String类型
			let s1 = String::from("hello");
			let s2 = s1.clone();
			
			解释:s1克隆一份给s2,h1克隆一份给h2,结果是Stack和Heap都会占用内存
					会比较吃资源
	
	(5)变量和数据交互的方式:复制
		1.基础的类型
			let x = 5;
			let y = x;
			
			解释:和C一样

总结:能用copy的类型也就是数据只存放在Stack上的类型
		所有的整数类型,例如	i32,u32
		bool
		char
		浮点类型,例如	f64
		Tuple(元组),如果元组里的字段都是能Copy的话
			(i32, i32)		//可行
			(i32, String)	//不行

	
	(6)所有权和函数





























		
	
	