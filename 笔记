											Rust(锈)
1、运行(文件名为Hello World.rs)
	fn main(){
		println!('Hello World');
	}

	终端:
	rustc Hello World.rs	//编译这个文件,前提是文件路径不能搞错。这会生成一个.exe,命名标准见下
	./hello_world			//运行hello_world.exe ,命名会吧原来的.rs名字改为小写,空格改为下划线
	

2、输出
	print!();	//与C相同,但是占位符修改成{}
	println!();	//与C相同,但是占位符修改成{},ln相对比是换行
	
	占位符'{}'的用法:
		println!('{}',a); 	// 输出为a的值
		println!('{{}}',a);	// 输出为'{}'
		println!('{0},{1},{2}',a,b,c);	//	输出结果为	a,b,c
		println!('{2},{1},{0}',a,b,c);	//	输出结果为	c,b,a
		
		///{0}是把后面定义的变量和常量都认为是一个链式数组,0代表第一个量的值,1代表第二个量的值
	例子1:
		let a = '女生';
		let old = 18;
		let year = 2005;
		let moon = 3;
		let day = 31;
		println!('李是个{}',a);
		println!('李是个可爱的女生,她今年快{0}岁了,她是{3}年{2}月{1}日降生与这个世上的',old,day,moon,year);
	
	输出1:
		李是个女生
		李是个可爱的女生,她今年快18岁了,她是2005年3月31日降生与这个世上的
		
3、定义常量和变量
///	Rust是静态强类型语言，所有的变量都有严格的编译期语法检查。

	let变量
	static变量
	const常量

	(1)let变量
		用法:声明局部变量
		1.不可变局部变量
			let x = 5;		//要是修改x的值系统报错
			let x:f64 = 0.64;
		2.可变局部变量
			let mut x = 5;
			println!('{}', x);
			x = 6;		//只修改值不修改x的地址
			println!('{}', x);
			
			输出:5
				 6
		3.自动类型推导
			let a = 32;		//int类型
			let b = '32';	//str类型
		
	(2)static变量
		用法:静态全局变量,静态局部变量
		在 let 前+ static
		
	(3)const常量
		用法:声明常量	//次常量是全局,不会局限与{},而是作用于所有域
		///声明常量使用 const 关键字而不是 let，并且必须注明值的类型
		
4、数据类型
///	和C类似
	(1)整数类型
		位长度			有符号			无符号	
		8-bit 			i8 				u8		
		16-bit 			i16 			u16		
		32-bit 			i32 			u32		
		64-bit 			i64 			u64		
		128-bit 		i128 			u128	
		arch 			isize 			usize	

		十进制 				98_222		
		十六进制 			0xff		
		八进制 				0o77		
		二进制 				0b1111_0000	

	(2)浮点类型
		'f32'
		'f64'
		
	(3)布尔类型
		同C
		
	(4)字符类型
		同C
		强调:Rust上字符串中文只能用UTF-8
	
	(5)复合类型
	
		1.这是一对用元组包括的一组数据,可以不同类型
			let tup:(i32, f64, u8) = (500, 6.4, 1);
			//	tup.0 等于 500
			//	tup.1 等于 6.4
			//	tup.2 等于 1
			let (x, y, z) = tup;
			// 	y 等于 6.4
		
		2.数组用[]包括相同类型的数据
			let a = [1, 2, 3, 4, 5];
			//	a为长度为5的整型数组
			
			let b = ['li', 'jin', 'wan'];
			//	b是长度为3的字符串数组
			
			let c: [i32,5] = [1, 2, 3, 4, 5];
			//	c是长度为5的 i32 类型数组

			let d = [3; 5];
			//	等同于let d = [3, 3, 3, 3, 3]

			let first = a[0];
			//	访问数组和C一致
			
			a[0] = 123;		//错误,数组 a 不可以修改
			let mut a = [1, 2, 3];	
			a[0] = 4;		//正确
			
5、注释
	'//', '///', '/*'    '*/'
	和C一样

6、条件语言
	和C类似
		(1)if a>0{
			print!()
		}












		
	
	